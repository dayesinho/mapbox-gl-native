apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply from: file('../gradle/artifact-settings.gradle')


group = project.ext.mapboxArtifactGroupId
project.archivesBaseName = project.ext.mapboxArtifactId


install {
    repositories.mavenInstaller {
        pom.project {

            // Make sure that artifactId and name are the same String values!
            // https://github.com/bintray/gradle-bintray-plugin/issues/81#issuecomment-149632738

            name project.ext.mapboxBintrayPackageName
            println 'name = ' + name

            description project.ext.mapboxArtifactDescription
            println 'description = ' + description
            url project.ext.mapboxArtifactGitUrl
            inceptionYear project.ext.mapboxArtifactInceptionYear

            packaging 'aar'
            groupId project.ext.mapboxArtifactGroupId
            artifactId project.ext.mapboxArtifactId
            version VERSION_NAME
            println 'version = ' + version

            scm {
                connection project.ext.mapboxArtifactVcsUrl
                url project.ext.mapboxArtifactScmUrl
            }

            developers {
                developer {
                    name project.ext.mapboxArtifactDeveloperName
                }
            }

            licenses {
                license {
                    name project.ext.mapboxLicenseName
                    url project.ext.mapboxLicenseUrl
                    distribution 'repo'
                }
            }
        }
    }
}

publishing {
    publications {
        MapboxMapsSdkPublication(MavenPublication) {
            // Define this explicitly if using implementation or api configurations

            pom.withXml {

                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')

    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')

    publications = ['MapboxMapsSdkPublication']
    dryRun = false // Whether to run this as dry-run, without deploying
    publish = false // Whether version should be auto published after an upload
    override = true // Whether to override version artifacts already published
    pkg {
        userOrg = project.ext.mapboxBintrayUserOrg
        println 'pkg userOrg = ' + userOrg

        repo = project.ext.mapboxBintrayRepoName
        println 'pkg repo = ' + repo

        name = project.ext.mapboxBintrayPackageName
        println 'pkg name = ' + name

        desc = project.ext.mapboxArtifactDescription
        websiteUrl = project.ext.mapboxArtifactUrl
        issueTrackerUrl = project.ext.mapboxArtifactTrackerUrl
        vcsUrl = project.ext.mapboxArtifactVcsUrl
        licenses = [project.ext.mapboxLicenseName]
        version {
            name = VERSION_NAME
            println 'version name = ' + name

            desc = project.ext.mapboxArtifactDescription
            println 'version desc = ' + desc

            released = new Date()
            println 'version released = ' + released

            gpg {
                sign = false
                passphrase = project.hasProperty('gpgPassphrase') ? project.property('gpgPassphrase') : System.getenv('GPG_PASSPHRASE')
            }
            mavenCentralSync {
                sync = false
            }
        }
    }
}

